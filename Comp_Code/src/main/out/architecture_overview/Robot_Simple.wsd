@startuml
allowmixing
    Class Main {
        +main(String... args)
    }

    note left of Main #SkyBlue
    Main is the
    starting Java Class
    end note


Class Robot {
    
}

Main -down-> Robot

note left of Robot #SkyBlue
    The Robot Class is
    a TimedRobot and is
    created in Main.
    Creates the RobotContainer
    object.
end note

Class TimedRobot #LightGray{
    
}
TimedRobot <|-- Robot
note right of TimedRobot #SkyBlue
    The TimedRobot Class is an extension
    of the IterativeRobotBase Class that
    contains many of the base robot functions
    (teleopPeriodic, autonomousExit, etc.).
end note


Class RobotContainer{
    ..Subsystems..
    ..Input Devices..
    ..Commands for Autos..
    ..Methods..
}
Robot -right-> RobotContainer #line.dashed

note left of RobotContainer #SkyBlue
    The RobotContainer Class defines the subsystem Classes,
    declares the controller and button and trigger Classes.
    A private method binds controller information (via
    the DriversStation Class) to Commands in the form of 
    descrete Command Classes or nameless Commands via lambda
    functions. Commands call methods within SubSystems and are
    scheduled via the CommandScheduler Class.
    Commands are also added to the NamedCommands class here.
    The NamedCommands Class is an array of Commands that are
    available to autonomous routines built in PathPlanner.
end note

Class IntakeSubsystem{
    ..Components..
    -intakeMotor: SparkMax
    -sensor: DigitalInput
    -hasCoral: boolean
}
RobotContainer -down-> IntakeSubsystem #line.dashed

Class PopperSubsystem{
    ..Components..
    -Rotator: TalonFX
    -Spinner: SparkMax
    -intakeArmEncoder: Encoder
    }
RobotContainer -down-> PopperSubsystem #line.dashed



    Class ElevatorSubsystem{
        ..Components..
        -elevatorMotor: TalonFX
        -limitSwitch: DigitalInput
        
    }

    RobotContainer -down-> ElevatorSubsystem #line.dashed



Class DriveTrain{
    ..Components..
    -swerveDrive: SwerveDrive
    -aprilTagFieldLayout: AprilTagFieldLayout
    -vision: Vision
}

RobotContainer -down-> DriveTrain #line.dashed

note left of DriveTrain #SkyBlue
    Subsytems are a Class used to
    define robot hardware (motors
    and sensors) and the methods
    that interface with them. Subsystems
    are used to make sure that hardware is
    only told to do one thing at a time.
end note

    Class Vision{
        ..Components..
        +fieldLayout:AprilTagFieldLayout
        ..Camera Level Atributes..
        
    }

    Vision <-up- DriveTrain #line.dashed
 
   
    Class LedSubsystem{
        ..Components..
        -led:AddressableLED
        -ledSim:AddressableLEDSim
        -ledBuffer:AddressableLEDBuffer
    }
    RobotContainer -down-> LedSubsystem #line.dashed

Class SubsystemBase #LightGray{
    
}
SubsystemBase <|-down- IntakeSubsystem
SubsystemBase <|-down- PopperSubsystem
SubsystemBase <|-down- ElevatorSubsystem
SubsystemBase <|-down- DriveTrain
SubsystemBase <|-down- LedSubsystem


    Class DriverStation #LightGray{
        ..Components..
        +{static}kJoystickPorts:int
    }
    DriverStation --> RobotContainer #line.dashed

    

'These are Constant Sub-Objects
Class Constants #LightGoldenRodYellow{
}
    RobotContainer .down[#Blue,thickness=2].> Constants 
    DriveTrain .up[#Blue,thickness=2].> Constants 
    ElevatorSubsystem .up[#Blue,thickness=2].> Constants 
    IntakeSubsystem .up[#Blue,thickness=2].> Constants 
    LedSubsystem .up[#Blue,thickness=2].> Constants 
    PopperSubsystem .up[#Blue,thickness=2].> Constants 


Class Command #LightGray{
    }

Class CommandScheduler #LightGray{
    }

Robot --> CommandScheduler #line.dashed

note right of CommandScheduler #SkyBlue
    The CommandSchedule is responsible for
    collecting the actions from Commands.
    Either from Command objects or instant 
    commands. 
end note

Class AbsoluteFieldDrive{
    
}



actor Operator #Green

Operator -[#Green]-> DriverStation

AbsoluteFieldDrive -up-|> Command
RobotContainer --> AbsoluteFieldDrive #line.dashed
AbsoluteFieldDrive --> DriveTrain
DriverStation -[#Green]-> AbsoluteFieldDrive
AbsoluteFieldDrive -right[#Green]-> CommandScheduler
note left of AbsoluteFieldDrive #SkyBlue
    The AbsoluteFieldDrive Class 
    is a Command Class that requires
    a DriveTrain subsystem.
end note

@enduml